openapi: 3.0.1
info:
  title: Shop
  version: 1.0.0
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        email:
          type: string
        password:
          type: string

    Item:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        price:
          type: integer
          format: int64

    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        user_id:
          type: integer
          format: int64
        items:
          type: array
          items:
            $ref: '#/components/schemas/Item'
        created_at:
          type: string
          format: date-time

  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      name: api_key
      in: header

paths:
  /user/login:
    post:
      operationId: loginUser
      parameters:
        - name: name
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          headers:
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
        400:
          description: Invalid username or password
          content: { }

  /user/logout:
    post:
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        200:
          description: successful logout
          content: { }

  /items:
    get:
      summary: Lists Items with filters
      operationId: ListItems
      parameters:
        - name: price_min
          in: query
          description: Lower price
          required: false
          schema:
            type: integer
            format: int64
        - name: price_max
          in: query
          description: Upper price
          required: false
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        400:
          description: Invalid price range
          content: { }
    post:
      summary: Add a new item to the store
      operationId: CreateItem
      requestBody:
        description: Item object that needs to be added to the store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        201:
          description: Created
        405:
          description: Invalid input
      security:
        - ApiKeyAuth: [ ]

  /items/{itemId}:
    get:
      summary: Find item by ID
      operationId: GetItem
      parameters:
        - name: itemId
          in: path
          description: ID of item to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        400:
          description: Invalid ID supplied
          content: { }
    put:
      summary: Updates a item in the store with form data
      operationId: UpdateItem
      parameters:
        - name: itemId
          in: path
          description: ID of item that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  description: Updated name of the item
                status:
                  type: string
                  description: Updated status of the item
      responses:
        405:
          description: Invalid input
          content: { }
      security:
        - ApiKeyAuth: [ ]
    delete:
      summary: Deletes a item
      operationId: DeleteItem
      parameters:
        - name: itemId
          in: path
          description: Item id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: { }
        404:
          description: Item not found
          content: { }
      security:
        - ApiKeyAuth: [ ]

  /orders:
    get:
      summary: Lists Orders with filters
      operationId: ListOrders
      parameters:
        - name: from-date
          in: query
          description: From which date-time
          required: false
          schema:
            type: string
            format: date-time
        - name: to-date
          in: query
          description: To which date-time
          required: false
          schema:
            type: string
            format: date-time
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        400:
          description: Invalid date-time range
          content: { }
      security:
        - ApiKeyAuth: [ ]
    post:
      summary: Post a new order
      operationId: Create order
      requestBody:
        description: Order object that needs to be added to the store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        201:
          description: Created
        405:
          description: Invalid input
      security:
        - ApiKeyAuth: [ ]

  /orders/{orderId}:
    get:
      summary: Find order by ID
      operationId: GetOrder
      parameters:
        - name: orderId
          in: path
          description: order ID to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        400:
          description: Invalid ID supplied
          content: { }
    put:
      summary: Updates an order
      operationId: UpdateOrder
      parameters:
        - name: orderId
          in: path
          description: item ID to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              properties:
                items:
                  type: array
                  items:
                    $ref: '#/components/schemas/Item'
                date:
                  type: string
                  format: date-time
      responses:
        405:
          description: Invalid input
          content: { }
      security:
        - ApiKeyAuth: [ ]
    delete:
      summary: Deletes an order
      operationId: DeleteOrder
      parameters:
        - name: orderId
          in: path
          description: Order id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        400:
          description: Invalid ID
          content: { }
        404:
          description: Item not found
          content: { }
      security:
        - ApiKeyAuth: [ ]